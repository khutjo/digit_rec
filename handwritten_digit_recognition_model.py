import tensorflow as tf
import numpy as np

mnist = tf.keras.datasets.mnist
(x_train, y_train),(x_test , y_test) = mnist.load_data()
x_train.shape

x_train = tf.keras.utils.normalize(x_train , axis = 1)
x_test = tf.keras.utils.normalize(x_test , axis = 1)


img_size = 28
x_trainer = np.array(x_train).reshape(-1,img_size,img_size,1)
x_tester = np.array(x_test).reshape(-1,img_size,img_size,1)

from tensorflow import keras
model = keras.models.load_model('digit_recogniser_model.h5')

resize = ([255, 255, 255, 254, 255, 254, 255, 254, 254, 254, 255, 255, 255, 253, 255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 251, 255, 253, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 253, 253, 255, 254, 254, 255, 254, 253, 255, 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [253, 254, 254, 255, 250, 255, 255, 255, 253, 255, 252, 255, 255, 254, 255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 252, 255, 0, 0, 1, 0, 0, 0, 0, 2, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [248, 255, 255, 253, 255, 255, 0, 0, 254, 253, 254, 255, 255, 255, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 252, 255, 252, 255, 0, 255, 253, 255, 255, 252, 253, 252, 255, 2, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 254, 253, 255, 255, 253, 255, 255, 251, 254, 255, 254, 255, 254, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 251, 255, 252, 253, 255, 255, 0, 254, 253, 255, 255, 251, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 255, 255, 255, 252, 1, 2, 255, 250, 252, 255, 255, 252, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 254, 252, 255, 251, 255, 254, 255, 255, 1, 252, 255, 254, 255, 253, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 255, 255, 252, 254, 0, 255, 253, 255, 255, 255, 254, 254, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 254, 250, 255, 255, 250, 253, 255, 255, 0, 254, 254, 255, 255, 251, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 253, 251, 255, 255, 254, 0, 2, 253, 255, 253, 250, 255, 252, 253, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 251, 255, 254, 255, 0, 253, 253, 255, 255, 254, 255, 252, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 0, 0, 255, 255, 253, 255, 255, 253, 254, 255, 255, 255, 255, 255], [255, 254, 254, 255, 255, 253, 255, 255, 255, 254, 255, 253, 253, 5, 0, 255, 254, 254, 255, 255, 255, 252, 255, 252, 255, 255, 255, 255], [254, 254, 255, 252, 254, 255, 251, 255, 255, 255, 249, 3, 3, 0, 252, 255, 255, 255, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255], [255, 255, 253, 255, 255, 253, 255, 1, 0, 0, 1, 0, 251, 255, 255, 254, 254, 253, 255, 254, 255, 255, 252, 251, 255, 255, 255, 255], [252, 254, 255, 255, 255, 255, 0, 0, 255, 255, 255, 255, 255, 252, 255, 255, 255, 254, 255, 255, 252, 255, 255, 255, 255, 255, 255, 255], [255, 254, 251, 255, 252, 255, 255, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 5, 250, 255, 254, 255, 255, 255, 255], [252, 255, 255, 255, 253, 255, 252, 255, 254, 255, 255, 255, 255, 252, 255, 254, 252, 255, 255, 255, 252, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 252, 255, 252, 255, 255, 255, 255, 253, 252, 255, 255, 254, 255, 255, 254, 255, 252, 255, 255, 246, 255, 255, 255, 255, 255], [255, 255, 255, 255, 252, 254, 255, 255, 255, 251, 255, 255, 253, 255, 255, 255, 251, 255, 255, 254, 254, 255, 255, 254, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255] )

new_img = tf.keras.utils.normalize(resize, axis=1)
new_img = np.array(new_img).reshape(-1,img_size,img_size,1)
predictions = model.predict(new_img)

print(np.argmax(predictions))
